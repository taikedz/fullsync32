#! /bin/bash
shopt -s expand_aliases

#LGSIZE=4000000000
LGSIZE=5000001
EXCLFILE="/tmp/fullsync32exclusionfile"

alias fullsync32rsync='rsync -avz --max-size=$LGSIZE'

# ====================

# if any file has ".fullsync32split" in its name that is not managed by this tool, there will be trouble...
# but it's not likely
# put caveat in documentation
# --exclude-from=$EXCLFILE
cat <<EOF > $EXCLFILE
*.fullsync32split*
*.fullsync32rsrc
EOF

if [ _$1 = '_-h' ]; then
cat <<EOF
Rsync post-processor for backing up Linux and Mac filesystems to FAT32

$0 { -b | -r } -live=LVIEDIR -archive=ARCHIVEDIR

LIVEDIR is the directory that is normally in use.
ARCHIVEDIR is the directory on the backup medium.

Building on top of rsync, this post-processor will ensure files with resource forks are preserved (when backing up Mac files), and will split large files into chunks less than 4GB

The post-processor is then also used during restore process, where the middle-files are excluded from the rsync restore, and then unpacked directly to disk.

To override the rsync behaviour, set an alias for: fullsync32rsync

By default, this will otherwise be

	$(alias fullsync32rsync)

With exclusion files passed to it.

OPTIONS

-b specifies backup mode - hunts for resource forks and large files. Hardlinks not recognized at the moment -- 2 files hardlinked to the same data will become 2 separate files in this backup process.

-r specifies restore mode - hunts for middle files in the backup to restore them straight to disk.


EOF
exit
fi

# ==============================
# generalized handles

maybefail() { # arg1=exit code // arg2=message
	if [ $1 != 0 ]; then echoerror "$2"; exit 1; fi
}

touchorfail() { # argument - path to file to touch
	touch $1
	maybefail $? "Could not create temp file for exclusion: $1"
}

echoerror() {
	echo $@ > /dev/stderr
}

# Debugging - write to stderr
echotest() {
	echoerror $@
}

# serious issues with this command when testing in OS X terminal shell. retest as script
filesize() {
	if [ $ISMAC = 'yes' ]; then
		echo $(stat -s $1 | sed -E -e "s/.*st_size=([0-9]+).*/\1/")
	else # assumes Linux
		echo $(stat -c%s $1)
	fi
}

function randomString {
	# adapted from http://utdream.org/post.cfm/bash-generate-a-random-string
	
	# if a param was passed, it's the length of the string we want
	if [[ -n $1 ]] && [[ "$1" -lt 20 ]]; then
		local myStrLength=$1;
	else
		# otherwise set to default
		local myStrLength=8;
	fi

	local mySeedNumber=$$`date +%N`; # seed will be the pid + nanoseconds
	local myRandomString=$( echo $mySeedNumber | md5sum | md5sum );
	# create our actual random string
	echo "${myRandomString:2:myStrLength}"
}

getmd5() {
	NODE=$1
	local md5res=$(md5sum "$NODE")
	if [ $ISMAC = 'yes' ]; then
		echo $md5res | sed -E -e 's/MD5 \(.+\) = (.+)$/\1/g'
	else
		echo $md5res | sed -E -e 's/^(.+) .+/\1/g'
	fi
}

abspath() {
	if [ _${1:0:1} = "_/" ]; then
		echo $1
	else
		echo $PWD/$1
	fi
}

# ==============================
# necessary temp files and vars

ISMAC=''
if [ 'empty'$(echo $OSTYPE | grep darwin) != 'empty' ]; then
	ISMAC="yes";
	else ISMAC="no";
fi

if [ $ISMAC = 'yes' ]; then
	alias md5sum='md5'
fi

# ==============================
# resource fork identification
# OS X uses the resource fork construct on some files, which is a hangover from design from the Mac OS Classic days.
# files with resource forks are found on OS X systems, which have their own TAR that can handle them
# TAR the files; exclude the originals


RSRCSTR="/..namedfork/rsrc"
if [ $ISMAC = 'yes' ]; then
	if [ "old"$(sw_vers | grep -Po "10\.[0-6]\.") != "old" ]; then
		RSRCSTR="/rsrc" # different format pre-10.7
	fi
fi

hasrsrc() {
	MYFILE="$1$RSRCSTR"
	#echotest ... ... PWD=$PWD MYFILE=$MYFILE
	FOUNDRES=yes$(ls -l "$MYFILE" | grep -Po "0\s+[0-9]+\s+[a-zA-Z]");
	# resource fork found to be zero length - returns string

	# FOUNDRES is exactly "yes" if resource is non-zero
	if [ "$FOUNDRES" = "yes" ]; then
		echo "yes"
	else
		echo "no"
	fi
}



# ==============================
# Now do the actual work.

# pass as $1 the live directory to process
# pass as $2 the corresponding archive directory
# both must be absolute
f32backup() {
	pushd "$1"
	#echotest ===== changed to $1 against $2
	if [ ! -d "$2" ]; then # test with a large file in subdirectory, as only file
		
		# rsync did not create the directory... what's the problem here...?
		echoerror "The archive directory does not exist"
		exit 2
	fi
	
	for NODE in *; do
		if [ -d "$NODE" ]; then
			f32backup "${1}/${NODE}" "${2}/${NODE}"
			continue
		fi
		LGNODE=$NODE # the NODE that is the large file to process
		#echotest ... preliminary: LGNODE=$LGNODE // NODE=$NODE
		
		# check resource
		if [ $(hasrsrc "$NODE") = "yes" ]; then
			# process resources
			tar -czf "$NODE.fullsync32rsrc" "$NODE"
			
			# process the rsrc instead of the original, when checking size
			LGNODE="$NODE.fullsync32rsrc"
		fi
		#echotest ... after RSRC check: LGNODE=$LGNODE // NODE=$NODE
		#echotest ... filsize LGNODE is $(filesize $LGNODE)
		
		if [ $(filesize "$LGNODE") -gt $LGSIZE ]; then
			# split and move
			# all files from splitting end in .fullsync32split*
			# the md5 file ends in .fullsync32split-md5 and contains as single line the original md5
			local SPLITPREFIX="${LGNODE}.fullsync32split"
			split -b $LGSIZE -a 3 "$LGNODE" "$SPLITPREFIX."
			echo $(getmd5 "$LGNODE") > "./${SPLITPREFIX}-md5"
			# DEAC :
			#echotest !! Current contents
			#echotest "$SPLITPREFIX"* "$2"
			fullsync32rsync "$SPLITPREFIX"* "$2" # glob on the outside :-)
			# TODO -- error handling if rsync failed
			# TODO -- handling hardlinks
			
			# cleanup the split files
			rm "$SPLITPREFIX"*
		elif [ $(hasrsrc "$NODE") = "yes" ]; then
			# if file was not large, no need to sync... unless we're processing a large resource TAR'd file that shrank....!
			#echotest ... we.re going to sync $LGNODE
			#echotest /=========
			#alias fullsync32rsync
			fullsync32rsync "$LGNODE" "$2"
			#echotest ==========/
		fi
		
		#echotest Checking if resources need cleaning up...
		if [ $(hasrsrc "$NODE") = "yes" ]; then
			#echotest ... LGNODE for cleanup is $LGNODE
			# cleanup the resource step
			rm "$NODE.fullsync32rsrc"
			rm "$2/$NODE"
		fi
		#echotest Processed a file! ==================
	done
	
	popd
	echotest Bubbling up!
}

# arg1 backup directory
# arg2 live directory
# we need both to be absolute
f32restore() {
	cd "$1"
	if [ ! -d "$2" ]; then
		# rsync didn't recreate this directory for some reason
		# should we really override?
		# current reasoning: a file is in the backup because we want it restored. mkdir.
		mkdir -p "$2"
		
		# TODO -- verify the permissions on the created directory
	fi
	
	for NODE in *.fullsync32split-md5; do
		# the pattern itself is returned if no files present
		if [ ! -e "$NODE" ]; then break; fi
		
		# use deletion pattern to remove last two extensions
		SUBNODE=${NODE%%.fullsync32split-md5} # returns name before .fullsync32split-md5
		echotest Processing $NODE and checking for "${SUBNODE##*.}"
		if [ "${SUBNODE##*.}" = 'fullsync32rsrc' ]; then
			# using tar - switch to destination directory
			pushd "$2"
			# cat the split to tar -x
			cat "$1/${SUBNODE}.fullsync32rsrc."* | tar -x
			popd # back to the archive location
		else
			# if no change then don't bother
			if [ -f "$NODE" ]; then
				if [ $(cat "$NODE") = $(getmd5 "$2/$SUBNODE") ]; then continue; fi
			fi
			# cat straight to destination
			# SUBNODE is name without the split extension, use it
			cat "$1/${SUBNODE}.fullsync32split."* > "$2/$SUBNODE"
		fi
	done
	
	for NODE in *.fullsync32rsrc; do
		if [ ! -e "$NODE" ]; then break; fi
		
		SUBNODE=${NODE%%.fullsync32rsrc}
		pushd "$2"
		tar -xf "$1/${NODE}"
		popd # back to the archive location
	done
	
	# and recurse
	for NODE in *; do
		if [ -d "$NODE" ]; then
			f32restore "${1}/${NODE}" "${2}/${NODE}"
		fi
	done
}

# ======================

if [ _"$1" = '_-b' ]; then
	fullsync32rsync $(abspath $2) $(abspath $3)
	f32backup $(abspath $2) $(abspath $3)
elif [ _"$1" = '_-r' ]; then
	fullsync32rsync --exclude-from=$EXCLFILE $(abspath $2) $(abspath $3)
	f32restore $(abspath $2) $(abspath $3)
elif [ _"$1" = '_-t' ]; then
	echo Test mode - operating on file $2
	echo MD5 hash     = $(getmd5 $2)
	echo Has resource = $(hasrsrc $2)
	echo File size    = $(filesize $2)
else 
	echoerror "'$1' is not a recognized mode"
fi
